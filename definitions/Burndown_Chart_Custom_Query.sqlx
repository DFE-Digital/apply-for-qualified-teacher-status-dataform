config {
  type: "table"
}

WITH assessments_following_a_prelim AS (
  SELECT
    entity_id, key_updated, previous_state, new_state, previous_stage, new_stage, previous_statuses, new_statuses, occurred_at
  FROM
    `apply-for-qts-in-england.dataform_production.application_forms_field_updates_afqts` AS application_forms_field_updates
  WHERE
    key_updated IN ('stage', 'status') AND occurred_at >= '2023-02-01' 
    
    AND (previous_state = 'preliminary_check' AND new_state IN ('assessment_in_progress'))
   
    OR (previous_stage IN ('pre_assessment') AND new_stage IN ('assessment'))
     
    
)
, ranked_records_assessment_following AS (
  SELECT
    entity_id, key_updated, previous_state, new_state, previous_stage, new_stage, previous_statuses, new_statuses,  occurred_at,
    ROW_NUMBER() OVER (PARTITION BY entity_id ORDER BY occurred_at DESC) AS rn
  FROM assessments_following_a_prelim

), latest_assessment_following_a_prelim AS
(
SELECT
  entity_id, key_updated, previous_state, new_state, previous_stage, new_stage, previous_statuses, new_statuses, DATE(occurred_at) as date_occurred_at
FROM ranked_records_assessment_following
WHERE rn = 1
),
counts_latest_assessment_following_a_prelim as
(
select
date_occurred_at, count (*) as daily_count_of_assessments_following_a_prelim
from latest_assessment_following_a_prelim
group by date_occurred_at
),
 
prelims_resulting_in_a_decline AS
(
 SELECT
    entity_id, key_updated, previous_state, new_state, previous_stage, new_stage, previous_statuses, new_statuses,previous_declined_at, new_declined_at, occurred_at
  FROM
    `apply-for-qts-in-england.dataform_production.application_forms_field_updates_afqts` AS application_forms_field_updates
  WHERE
    key_updated IN ('status', 'stage') AND occurred_at >= '2023-02-01' 
   
    AND ((previous_state = 'preliminary_check' AND new_state IN ('declined'))
  
    OR (previous_stage IN ('pre_assessment') AND new_stage IN ('completed')))
    
)
, ranked_records_decline_following AS (
  SELECT
    entity_id, key_updated, previous_state, new_state, previous_stage, new_stage, previous_statuses, new_statuses,previous_declined_at,new_declined_at, occurred_at,
    ROW_NUMBER() OVER (PARTITION BY entity_id ORDER BY occurred_at DESC) AS rn
  FROM prelims_resulting_in_a_decline
), latest_prelims_resulting_in_a_decline AS
(
SELECT
  entity_id, key_updated, previous_state, new_state, previous_stage, new_stage, previous_statuses, new_statuses, previous_declined_at,new_declined_at,DATE(occurred_at) as date_occurred_at
FROM ranked_records_decline_following
WHERE rn = 1
),
counts_latest_decline_following_a_prelim as
(
select
date_occurred_at, count (*) as daily_count_of_declines_following_a_prelim
from latest_prelims_resulting_in_a_decline
group by date_occurred_at
),
percentage_assessments_after_a_prelim as
(
select 
assess_after_prelim.date_occurred_at, 
daily_count_of_declines_following_a_prelim,
daily_count_of_assessments_following_a_prelim,
round(( daily_count_of_assessments_following_a_prelim * 100 / (daily_count_of_declines_following_a_prelim + daily_count_of_assessments_following_a_prelim)),2) as percentage_assessments_after_a_prelim_per_day
from counts_latest_decline_following_a_prelim as decline_after_prelim
full join counts_latest_assessment_following_a_prelim as assess_after_prelim on assess_after_prelim.date_occurred_at = decline_after_prelim.date_occurred_at  
where assess_after_prelim.date_occurred_at is not NULL
)


,applications_from_version_and_latest AS



(

  SELECT
    application_forms_latest.reference as app_form_latest_reference,
    DATE(application_forms_latest.submitted_at) AS date_submitted_at,
    application_forms_latest.submitted_at,
     application_forms_latest.requires_preliminary_check as  app_form_latest_requires_preliminary_check,
    application_forms_latest.stage as app_form_latest_stage,
    application_forms_latest.state as app_form_latest_state,
    application_forms_latest.statuses as app_form_latest_statuses,

    *
  FROM
    `apply-for-qts-in-england.dataform_production.application_forms_latest_afqts` AS application_forms_latest
  LEFT JOIN
    `apply-for-qts-in-england.dataform_production.assessments_latest_afqts` AS assessments_latest
  ON
    application_forms_latest.id = assessments_latest.application_form_id
   
      WHERE    application_forms_latest.submitted_at IS NOT NULL 
    
  
)


,
new_app_per_day_count as
(
 select date_submitted_at , count(*) as new_apps_per_day 
 FROM
    applications_from_version_and_latest
 group by date_submitted_at
)


,

new_app_prelim_per_day_count as
(
 select date_submitted_at, count(*) as new_apps_prelim_per_day 
 from applications_from_version_and_latest
 where app_form_latest_requires_preliminary_check is TRUE
 group by date_submitted_at
) 

,


new_app_assessment_per_day_count as
(
 select date_submitted_at, count(*) as new_apps_assessments_per_day 
 from applications_from_version_and_latest
 where app_form_latest_requires_preliminary_check is FALSE
 group by date_submitted_at
),



prelims_completed_per_day AS ( 

  SELECT
    reference,
    state,
    stage,
    statuses,
    assessor_id,
    DATE(MIN(valid_from)) AS date_actioned_on
  FROM
 `apply-for-qts-in-england.dataform_production.application_forms_version_afqts` application_forms_version
  WHERE
     assessor_id IS NOT NULL
    AND ( state = 'preliminary_check'
      OR (stage = 'pre_assessment'
        AND statuses LIKE '%preliminary_check%'))
  GROUP BY
    reference,
    state,
    stage,
    statuses,
    assessor_id   
    ),
    
  
  counts_per_day AS ( 
    SELECT
    date_actioned_on,
    COUNT(DISTINCT assessor_id) AS count_of_assessors,
    COUNT(assessor_id) AS count_of_prelims,
  FROM
  prelims_completed_per_day
  GROUP BY
    date_actioned_on ),
  
  average_prelims_assessed_per_day AS (
SELECT
 date_actioned_on,
round(count_of_prelims / count_of_assessors,2) as avg_prelims_assessed_per_day
FROM
  counts_per_day
  order by date_actioned_on ),




assessment_backlog AS 
(
select
 COUNT(*) AS assessment_backlog,CURRENT_DATE() AS action_date
 from applications_from_version_and_latest
WHERE
  stage = 'not_started'
  OR (stage = 'pre_assessment'
    AND NOT REGEXP_CONTAINS(statuses, r"preliminary_check")) 
),



prelim_backlog AS 
(
select
 COUNT(*) AS prelim_backlog,CURRENT_DATE() AS action_date
 from applications_from_version_and_latest
WHERE
  stage = 'pre_assessment'
  AND REGEXP_CONTAINS(statuses, r"preliminary_check")  
)


select 
na.date_submitted_at as action_date,
 FORMAT_DATE('%B' , na.date_submitted_at) AS action_month,
CASE
    WHEN EXTRACT(MONTH FROM na.date_submitted_at) BETWEEN 1 AND 3 THEN 'Q1'
    WHEN EXTRACT(MONTH FROM na.date_submitted_at) BETWEEN 4 AND 6 THEN 'Q2'
    WHEN EXTRACT(MONTH FROM na.date_submitted_at) BETWEEN 7 AND 9 THEN 'Q3'
    WHEN EXTRACT(MONTH FROM na.date_submitted_at) BETWEEN 10 AND 12 THEN 'Q4'
    ELSE NULL
  END AS action_quarter,
 EXTRACT(YEAR FROM na.date_submitted_at) AS action_year,
percentage_assessments_after_a_prelim_per_day,
new_apps_per_day,
new_apps_assessments_per_day,
new_apps_prelim_per_day,
assessment_backlog,
prelim_backlog
from new_app_per_day_count as na
left join percentage_assessments_after_a_prelim aaap ON aaap.date_occurred_at = na.date_submitted_at
left join new_app_assessment_per_day_count naa ON naa.date_submitted_at =  na.date_submitted_at
left join new_app_prelim_per_day_count nap ON nap.date_submitted_at = na.date_submitted_at
left join assessment_backlog ab on ab.action_date = na.date_submitted_at
left join prelim_backlog pb on pb.action_date = na.date_submitted_at
where na.date_submitted_at >= '2023-02-01'

